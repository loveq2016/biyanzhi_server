<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC 
    "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--这块等于dao接口的实现 namespace必须和接口的类路径一样 -->
<mapper namespace="com.biyanzhi.dao.PKDao">
	<resultMap type="com.biyanzhi.bean.PK" id="PK">
		<id property="pk_id" column="pk_id" />
		<id property="pk1_user_id" column="pk1_user_id" />
		<id property="pk1_user_gender" column="pk1_user_gender" />
		<result property="pk1_user_picture" column="pk1_user_picture" />
		<result property="pk1_ticket_count" column="pk1_ticket_count" />
		<result property="pk2_user_id" column="pk2_user_id" />
		<result property="pk2_user_picture" column="pk2_user_picture" />
		<result property="pk2_ticket_count" column="pk2_ticket_count" />
		<result property="pk_time" column="pk_time" />
		<result property="pk_state" column="pk_state" />
		<result property="pk_winer_user_id" column="pk_winer_user_id" />
		<result property="pk_finish_time" column="pk_finish_time" />
		<association property="pk1_win_count" column="pk1_user_id"
			javaType="int" select="getPK1WinCount" />
		<association property="pk1_fail_count" column="pk1_user_id"
			javaType="int" select="getPK1FailCount" />
		<association property="pk2_win_count" column="pk2_user_id"
			javaType="int" select="getPK2WinCount" />
		<association property="pk2_fail_count" column="pk2_user_id"
			javaType="int" select="getPK2FailCount" />
		<collection property="pkVotes" column="pk_id"
			ofType="com.biyanzhi.bean.PKVote" select="getPKVoteListByPKID" />
	</resultMap>
	<!-- id必须和接口中的方法名一样 返回一个 就是刚才的别名 如果不弄别名要连类路径一起写 麻烦 -->
	<insert id="addPK" parameterType="com.biyanzhi.bean.PK">
		insert into
		pk(pk1_user_id,pk1_user_gender,pk1_user_picture,pk1_ticket_count,pk2_user_id,pk2_user_picture,pk2_ticket_count,pk_time)
		values(#{pk1_user_id},#{pk1_user_gender},#{pk1_user_picture},#{pk1_ticket_count},#{pk2_user_id},#{pk2_user_picture},#{pk2_ticket_count},#{pk_time})
	</insert>
	<select id="getPKList" parameterType="Integer" resultMap="PK">
		select
		* from pk where pk_time > #{pk_time} order by pk_time desc limit 0,10

	</select>
	<select id="loadMorePKList" parameterType="Integer" resultMap="PK">
	<![CDATA[	select * from pk where pk_time < #{pk_time}
		order by
		pk_time desc limit 0,10]]>

	</select>
	<update id="upDatePK2" parameterType="Map">
		UPDATE pk SET
		pk2_user_id =
		#{pk2_user_id} , pk2_user_picture = #{pk2_user_picture} WHERE pk_id=
		#{pk_id}
	</update>
	<update id="upDatePK2TicketCount" parameterType="Map">
		UPDATE pk SET
		pk2_ticket_count =
		#{pk2_ticket_count} WHERE pk_id = #{pk_id}
	</update>
	<update id="upDatePK1TicketCount" parameterType="Map">
		UPDATE pk SET
		pk1_ticket_count = #{pk1_ticket_count} WHERE pk_id = #{pk_id}
	</update>
	<update id="upDatePKState" parameterType="Map">
		UPDATE pk SET
		pk_state =
		#{pk_state} , pk_winer_user_id = #{pk_winer_user_id}, pk_finish_time
		=
		#{pk_finish_time}
		WHERE pk_id=
		#{pk_id}
	</update>
	<select id="getPKVoteListByPKID" parameterType="Integer"
		resultType="com.biyanzhi.bean.PKVote">
		select * from pk_vote where pk_id = #{pk_id}

	</select>


	<select id="getPKIngList" parameterType="Integer" resultMap="PK">
		select
		* from pk where pk_time > #{pk_time} and pk_state is null order
		by
		pk_time desc limit
		0,10

	</select>
	<select id="loadPKIngMorePKList" parameterType="Integer"
		resultMap="PK">
	<![CDATA[	select * from pk where pk_time < #{pk_time} and pk_state is null
		order by
		pk_time desc limit 0,10]]>

	</select>


	<select id="getPKFinishedList" parameterType="Integer"
		resultMap="PK">
		select
		* from pk where pk_finish_time > #{pk_finish_time} and
		pk_state=1
		order by pk_finish_time
		desc limit
		0,10

	</select>
	<select id="loadPKFinishedMorePKList" parameterType="Integer"
		resultMap="PK">
	<![CDATA[	select * from pk where pk_finish_time < #{pk_finish_time} and pk_state=1
		order by
		pk_finish_time desc limit 0,10]]>

	</select>
	<select id="getPK1WinCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM pk WHERE
		pk_state=1 AND
		pk_winer_user_id=#{pk1_user_id}
	</select>
	<select id="getPK1FailCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM pk WHERE (pk1_user_id=#{pk1_user_id} OR
		pk2_user_id =#{pk1_user_id}) and
		pk_state=1 AND
		pk_winer_user_id
		!=#{pk1_user_id}

	</select>
	<select id="getPK2WinCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM pk WHERE
		pk_state=1 AND
		pk_winer_user_id=#{pk2_user_id}

	</select>
	<select id="getPK2FailCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM pk WHERE (pk2_user_id=#{pk2_user_id} OR
		pk2_user_id =#{pk2_user_id} ) and
		pk_state=1 AND
		pk_winer_user_id
		!=#{pk2_user_id}

	</select>
	<select id="getPKByPKID" parameterType="Integer" resultMap="PK">
		select * from pk where pk_id = #{pk_id}

	</select>
</mapper>